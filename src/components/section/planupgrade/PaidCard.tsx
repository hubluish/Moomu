'use client';

import styles from './PaidCard.module.css';

type Props = {
    title?: string;               // ex) "FREE"
    isCurrent?: boolean;          // "현재 플랜" 배지 표시
    priceLabel?: string;          // ex) "₩0"
    description?: string;         // 줄바꿈 포함 가능
    ctaText?: string;             // ex) "무료로 시작하기"
    features?: string[];          // bullet 5개
    onClickCTA?: () => void;
};

export default function PaymentCard({
    title = 'PLUS',
    isCurrent = true,
    priceLabel = '₩4,900', // 사용자가 "\0"라고 적었는데 실제 표기 의도는 '₩0'일 가능성이 높아 기본값을 이렇게 둠
    description = '더 많은 보드와 더 큰 가능성,\n제한 없는 창작을 위한 요금제입니다.',
    ctaText = 'Plus 이용하기',
    features = [
        '무드보드 <span class="featureHighlight">무제한 생성</span>',
        '무드보드 <span class="featureHighlight">무제한 저장</span>',
        '무드보드 <span class="featureHighlight">무제한 새로고침</span>',
        '더 많은 피드 탐색',
        '아티클 제공',
    ],
    onClickCTA,
    }: Props) {
    // CSS 모듈의 클래스 이름을 실제 클래스 이름으로 바꿔주기 위한 처리
    const processedFeatures = features.map(feature => 
        feature.replace('class="featureHighlight"', `class="${styles.featureHighlight}"`) 
    );

    return (
        <div className={styles.card}>
        <div className={styles.headerRow}>
            <PlusIcon />
            <h3 className={styles.planTitle}>{title}</h3>
        </div>

        <div className={styles.price}>{priceLabel}</div>

        <p className={styles.desc}>
            {description.split('\n').map((line, i) => (
            <span key={i}>
                {line}
                {i !== description.split('\n').length - 1 && <br />}
            </span>
            ))}
        </p>

        <button className={styles.cta} type="button" onClick={onClickCTA}>
            {ctaText}
        </button>

        <ul className={styles.features}>
            {processedFeatures.map((text, idx) => (
            <li className={styles.featureItem} key={idx}>
                <CheckIcon />
                <span className={styles.featureText} dangerouslySetInnerHTML={{ __html: text }} />
            </li>
            ))}
        </ul>
        </div>
    );
}

function PlusIcon() {
    return (
        <svg className={styles.plusIcon} xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none">
            <path d="M11.3836 6.81C12.1311 4.6225 15.1536 4.55625 16.0399 6.61125L16.1149 6.81125L17.1236 9.76125C17.3548 10.4378 17.7284 11.0569 18.2192 11.5768C18.71 12.0967 19.3065 12.5053 19.9686 12.775L20.2399 12.8762L23.1899 13.8838C25.3774 14.6313 25.4436 17.6537 23.3899 18.54L23.1899 18.615L20.2399 19.6238C19.5631 19.8548 18.9438 20.2283 18.4237 20.7191C17.9035 21.2099 17.4948 21.8065 17.2249 22.4688L17.1236 22.7388L16.1161 25.69C15.3686 27.8775 12.3461 27.9438 11.4611 25.89L11.3836 25.69L10.3761 22.74C10.1451 22.0632 9.7716 21.4439 9.28081 20.9238C8.79002 20.4037 8.19338 19.9949 7.53114 19.725L7.26114 19.6238L4.31114 18.6162C2.12239 17.8687 2.05614 14.8462 4.11114 13.9612L4.31114 13.8838L7.26114 12.8762C7.93768 12.6451 8.55678 12.2715 9.07667 11.7807C9.59656 11.2899 10.0052 10.6934 10.2749 10.0312L10.3761 9.76125L11.3836 6.81ZM13.7499 7.6175L12.7424 10.5675C12.3904 11.5991 11.8177 12.5416 11.0643 13.3294C10.3109 14.1171 9.39482 14.7312 8.37989 15.1287L8.06739 15.2425L5.11739 16.25L8.06739 17.2575C9.09902 17.6095 10.0415 18.1822 10.8293 18.9356C11.617 19.689 12.231 20.6051 12.6286 21.62L12.7424 21.9325L13.7499 24.8825L14.7574 21.9325C15.1094 20.9009 15.6821 19.9584 16.4355 19.1706C17.1889 18.3829 18.105 17.7688 19.1199 17.3713L19.4324 17.2587L22.3824 16.25L19.4324 15.2425C18.4008 14.8905 17.4583 14.3178 16.6705 13.5644C15.8828 12.811 15.2687 11.8949 14.8711 10.88L14.7586 10.5675L13.7499 7.6175ZM23.7499 2.5C23.9837 2.5 24.2129 2.5656 24.4113 2.68934C24.6098 2.81308 24.7695 2.99 24.8724 3.2L24.9324 3.34625L25.3699 4.62875L26.6536 5.06625C26.888 5.14587 27.0934 5.29327 27.2439 5.48977C27.3944 5.68627 27.4832 5.92302 27.499 6.17003C27.5148 6.41703 27.4569 6.66316 27.3327 6.87723C27.2084 7.0913 27.0234 7.26367 26.8011 7.3725L26.6536 7.4325L25.3711 7.87L24.9336 9.15375C24.8539 9.38804 24.7064 9.59337 24.5098 9.74374C24.3132 9.89411 24.0764 9.98274 23.8294 9.9984C23.5824 10.0141 23.3364 9.95606 23.1224 9.83172C22.9084 9.70739 22.7361 9.52233 22.6274 9.3L22.5674 9.15375L22.1299 7.87125L20.8461 7.43375C20.6118 7.35413 20.4063 7.20673 20.2559 7.01023C20.1054 6.81373 20.0166 6.57698 20.0008 6.32997C19.985 6.08297 20.0429 5.83684 20.1671 5.62277C20.2913 5.4087 20.4763 5.23633 20.6986 5.1275L20.8461 5.0675L22.1286 4.63L22.5661 3.34625C22.6504 3.09928 22.8099 2.88489 23.0222 2.73312C23.2345 2.58136 23.4889 2.49984 23.7499 2.5Z" fill="currentColor"/>
        </svg>
    );
}

function CheckIcon() {
    return (
        <svg
        className={styles.checkIcon}
        xmlns="http://www.w3.org/2000/svg"
        width="20" height="20" viewBox="0 0 20 20" fill="none"
        aria-hidden="true"
        >
        <path
            d="M7.95832 12.625L15.0208 5.5625C15.1875 5.39583 15.3819 5.3125 15.6042 5.3125C15.8264 5.3125 16.0208 5.39583 16.1875 5.5625C16.3542 5.72917 16.4375 5.92722 16.4375 6.15667C16.4375 6.38611 16.3542 6.58389 16.1875 6.75L8.54165 14.4167C8.37499 14.5833 8.18054 14.6667 7.95832 14.6667C7.7361 14.6667 7.54165 14.5833 7.37499 14.4167L3.79165 10.8333C3.62499 10.6667 3.54499 10.4689 3.55165 10.24C3.55832 10.0111 3.64527 9.81306 3.81249 9.64583C3.97971 9.47861 4.17777 9.39528 4.40665 9.39583C4.63554 9.39639 4.83332 9.47972 4.99999 9.64583L7.95832 12.625Z"
            fill="#8865F3"
        />
        </svg>
    );
}
